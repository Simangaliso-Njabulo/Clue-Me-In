@page "/play"
@inject WordsService WordsService

<div class="card-container">

    <FluentStack HorizontalGap="15" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Bottom" Width="90%" class="button-stack">

        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left">
            <FluentSelect Label="Category" @bind-Value="selectedCategory"
                          @onchange="OnCategoryChanged"
                          Items="categories" />
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" HorizontalGap="15">
            <!-- Decrease time by 30 seconds -->
            <FluentButton IconEnd="@(new Icons.Regular.Size24.Subtract())" OnClick="DecreaseTime"></FluentButton>

            <!-- Timer display button -->
            <FluentButton IconEnd="@(new Icons.Regular.Size24.Timer())" OnClick="ToggleTimer">
                @timerDisplay
            </FluentButton>

            <!-- Increase time by 30 seconds -->
            <FluentButton IconEnd="@(new Icons.Regular.Size24.Add())" OnClick="IncreaseTime"></FluentButton>
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right">
            <FluentButton>Score: @correctCount</FluentButton>
            <FluentButton IconEnd="@(new Icons.Regular.Size24.CheckmarkCircle().WithColor(Color.Success))" OnClick="OnCorrect">Correct</FluentButton>
            <FluentButton IconEnd="@(new Icons.Regular.Size24.ArrowCircleRight().WithColor(Color.Error))" OnClick="OnSkip">Skip</FluentButton>
        </FluentStack>

    </FluentStack>

    <FluentCard class="card">
        <p class="card-text">@currentWord</p>
    </FluentCard>

</div>

@code {
    private List<string> words = new List<string>();
    private List<string> usedWords = new List<string>();
    private string currentWord = string.Empty;
    private List<string> categories = new List<string>();
    private string selectedCategory = string.Empty; // Selected category

    private int correctCount = 0; // Counter for correct answers
    private TimeSpan remainingTime; // Remaining time for the countdown
    private string timerDisplay = ""; // String to display on the countdown button
    private CancellationTokenSource cancellationTokenSource = new(); // To manage the countdown task
    private readonly TimeSpan maxTime = TimeSpan.FromMinutes(5); // Maximum allowed time (5 minutes)
    private readonly TimeSpan minTime = TimeSpan.FromSeconds(30); // Minimum allowed time (30 seconds)
    private bool isTimerRunning = false; // To track if the timer is running

    protected override async Task OnInitializedAsync()
    {
        categories = await WordsService.GetCategoriesAsync(); // Get the available categories
        if (categories.Count > 0)
        {
            selectedCategory = categories[0]; // Set default selected category if available
            await LoadWordsForSelectedCategory(); // Load words for the default category
            timerDisplay = "01:00"; // Initial display for 1 minute
            remainingTime = TimeSpan.FromMinutes(1); // Initialize the timer to 1 minute
        }
    }

    private async Task LoadWordsForSelectedCategory()
    {
        words = await WordsService.GetWordsAsync(selectedCategory); // Get the words from the selected category
        ShuffleWords(); // Shuffle the words
        GetNextWord(); // Get the first word to display
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? string.Empty; // Safely convert to string, default to empty if null
        await LoadWordsForSelectedCategory(); // Await the call to ensure it completes
    }

    private void ShuffleWords()
    {
        Random rng = new Random();
        int n = words.Count;
        while (n > 1)
        {
            int k = rng.Next(n--);
            (words[n], words[k]) = (words[k], words[n]); // Swap elements
        }
    }

    private void GetNextWord()
    {
        if (usedWords.Count < words.Count)
        {
            // Get the next word that hasn't been used
            currentWord = words[usedWords.Count];
            usedWords.Add(currentWord); // Mark this word as used
        }
        else
        {
            currentWord = "No more words available!"; // Inform the user when all words have been used
            StopCountdown(); // Stop the countdown when words run out
        }
    }

    // Handle the "Correct" button click
    private void OnCorrect()
    {
        correctCount++; // Increase correct answer count
        GetNextWord();
    }

    // Handle the "Skip" button click
    private void OnSkip()
    {
        GetNextWord();
    }

    // Toggle between starting and pausing the timer
    private void ToggleTimer()
    {
        if (isTimerRunning)
        {
            // Pause the timer
            StopCountdown();
        }
        else
        {
            // Start or resume the timer
            StartCountdown();
        }
    }

    // Starts the countdown
    private void StartCountdown()
    {
        isTimerRunning = true; // Mark timer as running
        cancellationTokenSource = new CancellationTokenSource();

        // Run the countdown in a background task
        Task.Run(async () =>
        {
            while (remainingTime.TotalSeconds > 0 && !cancellationTokenSource.Token.IsCancellationRequested)
            {
                await Task.Delay(1000); // Wait for 1 second
                remainingTime = remainingTime.Add(TimeSpan.FromSeconds(-1)); // Decrement the timer

                // Update the button display
                timerDisplay = remainingTime.ToString(@"mm\:ss");
                StateHasChanged(); // Trigger a UI refresh
            }

            // Make sure the UI displays 00:00 before stopping the timer
            if (remainingTime.TotalSeconds <= 0)
            {
                timerDisplay = "00:00"; // Ensure 00:00 is displayed
                StateHasChanged(); // Update the UI one last time
            }

            StopCountdown(); // Stop the countdown after the time runs out
        });
    }


    // Stop the countdown
    private void StopCountdown()
    {
        isTimerRunning = false; // Mark timer as not running
        cancellationTokenSource?.Cancel(); // Cancel the current countdown
    }

    // Increase the time by 30 seconds (up to a maximum of 5 minutes)
    private void IncreaseTime()
    {
        if (!isTimerRunning) // Prevent changing time while timer is running
        {
            if (remainingTime + TimeSpan.FromSeconds(30) <= maxTime)
            {
                remainingTime = remainingTime.Add(TimeSpan.FromSeconds(30));
            }
            else
            {
                remainingTime = maxTime; // Cap at maxTime
            }

            timerDisplay = remainingTime.ToString(@"mm\:ss"); // Update the display
            StateHasChanged(); // Refresh UI
        }
    }

    // Decrease the time by 30 seconds (but not below 30 seconds)
    private void DecreaseTime()
    {
        if (!isTimerRunning) // Prevent changing time while timer is running
        {
            if (remainingTime.TotalSeconds - 30 >= minTime.TotalSeconds)
            {
                remainingTime = remainingTime.Add(TimeSpan.FromSeconds(-30));
            }
            else
            {
                remainingTime = minTime; // Floor at 30 seconds
            }

            timerDisplay = remainingTime.ToString(@"mm\:ss"); // Update the display
            StateHasChanged(); // Refresh UI
        }
    }
}
