@page "/play"
@inject IPlayViewModel PlayVM

<div class="card-container">

    <FluentStack HorizontalGap="15" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Bottom" Width="90%" class="button-stack">

        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left">
            <FluentSelect 
            Label="Category"
            @bind-Value="PlayVM.SelectedCategory"
            @onchange="@(e => PlayVM.OnCategoryChanged(e))"
            Items="PlayVM.Categories"
            Disabled="PlayVM.HasGameStarted" />
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" HorizontalGap="15">
            <FluentButton 
            IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Subtract())"
            OnClick="PlayVM.DecreaseTime"
            Disabled="PlayVM.HasGameStarted">
            </FluentButton>

            <FluentButton 
            IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Timer())"
            OnClick="PlayVM.ToggleTimer">
                @PlayVM.TimerDisplay
            </FluentButton>

            <FluentButton 
            IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Add())"
            OnClick="PlayVM.IncreaseTime"
            Disabled="PlayVM.HasGameStarted">
            </FluentButton>
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right">
            <FluentButton 
            Disabled="!PlayVM.IsTimerRunning">
                Score: @PlayVM.CorrectWords.Count
            </FluentButton>

            <FluentButton 
            Disabled="!PlayVM.IsTimerRunning"
            IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.CheckmarkCircle().WithColor(Color.Success))"
            OnClick="PlayVM.OnCorrect">
                Correct
            </FluentButton>

            <FluentButton 
            Disabled="!PlayVM.IsTimerRunning"
            IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.ArrowCircleRight().WithColor(Color.Error))"
            OnClick="PlayVM.OnSkip">
                Skip
            </FluentButton>
        </FluentStack>

    </FluentStack>

    <FluentCard class="card">
        <p class="card-text">
            @(
                    PlayVM.IsTimerRunning
                    ? PlayVM.CurrentWord
                    : !PlayVM.HasGameStarted
                    ? "Press the timer to start the game"
                    : "Press the timer to resume the game"
                    )
        </p>
    </FluentCard>

</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        PlayVM.NotifyUI = StateHasChanged;
        await PlayVM.InitializeAsync();
    }
}