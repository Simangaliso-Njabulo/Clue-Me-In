@page "/play"
@inject WordsService WordsService

<div class="card-container">

    <FluentStack HorizontalGap="15" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Bottom" Width="90%" class="button-stack">

        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left">
            <FluentSelect Label="Category" @bind-Value="selectedCategory"
                          @onchange="OnCategoryChanged"
                          Items="categories" />
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center" HorizontalGap="15">
            <FluentButton IconEnd="@(new Icons.Regular.Size24.Timer())" OnClick="StartCountdown">
                @timerDisplay
            </FluentButton>
            <FluentCounterBadge Count="correctCount"
                                Appearance="Appearance.Neutral"
                                HorizontalPosition="-25">
                <FluentButton Appearance="Appearance.Accent">
                    <FluentIcon Value="@(new Icons.Regular.Size24.CheckmarkCircle())" Color="@Color.Fill" />
                </FluentButton>
            </FluentCounterBadge>
        </FluentStack>

        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right">
            <FluentButton IconEnd="@(new Icons.Regular.Size20.CheckmarkCircle().WithColor(Color.Success))" OnClick="OnCorrect">Correct</FluentButton>
            <FluentButton IconEnd="@(new Icons.Regular.Size20.DismissCircle().WithColor(Color.Error))" OnClick="OnIncorrect">Incorrect</FluentButton>
            <FluentButton IconEnd="@(new Icons.Regular.Size20.ArrowCircleRight().WithColor(Color.Info))" OnClick="OnSkip">Skip</FluentButton>
        </FluentStack>

    </FluentStack>

    <FluentCard class="card">
        <p class="card-text">@currentWord</p>
    </FluentCard>

</div>

@code {
    private List<string> words = new List<string>();
    private List<string> usedWords = new List<string>();
    private string currentWord = string.Empty;
    private List<string> categories = new List<string>();
    private string selectedCategory = string.Empty; // Selected category

    private int correctCount = 0; // Counter for correct answers
    private TimeSpan remainingTime; // Remaining time for the countdown
    private string timerDisplay = ""; // String to display on the countdown button
    private CancellationTokenSource cancellationTokenSource = new(); // To manage the countdown task

    protected override async Task OnInitializedAsync()
    {
        categories = await WordsService.GetCategoriesAsync(); // Get the available categories
        if (categories.Count > 0)
        {
            selectedCategory = categories[0]; // Set default selected category if available
            await LoadWordsForSelectedCategory(); // Load words for the default category
            timerDisplay = "01:00"; // Initial display for 1 minute
        }
    }

    private async Task LoadWordsForSelectedCategory()
    {
        words = await WordsService.GetWordsAsync(selectedCategory); // Get the words from the selected category
        ShuffleWords(); // Shuffle the words
        GetNextWord(); // Get the first word to display
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategory = e.Value?.ToString() ?? string.Empty; // Safely convert to string, default to empty if null
        await LoadWordsForSelectedCategory(); // Await the call to ensure it completes
    }

    private void ShuffleWords()
    {
        Random rng = new Random();
        int n = words.Count;
        while (n > 1)
        {
            int k = rng.Next(n--);
            (words[n], words[k]) = (words[k], words[n]); // Swap elements
        }
    }

    private void GetNextWord()
    {
        if (usedWords.Count < words.Count)
        {
            // Get the next word that hasn't been used
            currentWord = words[usedWords.Count];
            usedWords.Add(currentWord); // Mark this word as used
        }
        else
        {
            currentWord = "No more words available!"; // Inform the user when all words have been used
            StopCountdown(); // Stop the countdown when words run out
        }
    }

    // Handle the "Correct" button click
    private void OnCorrect()
    {
        correctCount++; // Increase correct answer count
        GetNextWord();
    }

    // Handle the "Incorrect" button click
    private void OnIncorrect()
    {
        GetNextWord();
    }

    // Handle the "Skip" button click
    private void OnSkip()
    {
        GetNextWord();
    }

    // Starts the countdown
    private void StartCountdown()
    {
        remainingTime = TimeSpan.FromMinutes(1); // Set to 1 minute
        cancellationTokenSource = new CancellationTokenSource();

        // Run the countdown in a background task
        Task.Run(async () =>
        {
            while (remainingTime.TotalSeconds >= 0)
            {
                timerDisplay = remainingTime.ToString(@"mm\:ss"); // Update the button display
                await Task.Delay(1000); // Wait for 1 second
                remainingTime = remainingTime.Add(TimeSpan.FromSeconds(-1)); // Decrement the timer
                StateHasChanged(); // Trigger a UI refresh
            }

            timerDisplay = "Time's up!"; // Notify when time is up
            StopCountdown(); // Stop the countdown
        });
    }

    // Stop the countdown
    private void StopCountdown()
    {
        cancellationTokenSource?.Cancel();
    }
}
